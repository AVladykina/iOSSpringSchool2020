/*:
 ![Post](post.png)
*/


/*:

 ## Основные компоненты

*/


// Объявите константу city и присвойте ей значение Воронеж

// Объявите константу страна и присвойте ей значение Россия

// Объявите переменную zipcode и присвойте ей значение 192168 в качестве строки, а не числа

// Объявите константу firstName и в качестве значения используйте свое имя

// Объявите константу lastName и в качестве значения используйте свою фамилию

// Объявите константу fullName, которая будет содержать полное имя на основе ранее созданных констант firstName и lastName

// Объявите константу temperature содержищию числовое значение температуры воздуха

// Используя строковой литерал выведете в консоль сообщение о сегодняшней погоде
// Пример: Температура в городе Санкт-Петербург составит 10°
// Используйте объявленные ранее переменные city и temperature

// Создайте массив cities и наполните его городами Воронеж, Москва, Новосибирск, Тверь, Владивосток

// Измените "Тверь" на "Киров"

// Выведите в консоль названия всех городов

// Создайте словарь temperatures, в котором ключом будет город, а значением температура

// Получите значение прогноза погоды в городе Киров

// Проитерируйте массив городов cities и выведите в консоль сообщение о погоде в каждом из городов

// Сделайте тоже самое, только не используя массив cities

// Мы хотим хранить не только температуру, но и состояние погоды создайте словарь modernTemperatures,
// чтобы хранить он содержал не только погоду, но и состояние (ясно, облачно, дождь, гроза и снег)
// в качестве значения использовать кортеж (tuple)

// Теперь отобразим более детальный прогноз погоды для каждого города
// Пример: Температура в городе Санкт-Петербург составит 10° (дождь)

// Создайте функцию greet, которая приветствует вас

// Вызовите эту функцию

// Добавьте функцию sum, которая принимает два аргумента типа Int и возвращает их сумму

// С помощью данной функции вычислите сумму 5 и 9

// Добавьте функцию div, которая принимает два аргумента типа Int и возвращает их частное если делитель равен 0, то возвращаем 0

// С помощью данной функции вычислите: 1) 10 / 5 2) 5 / 9 3) 123 / 0

/*:

 ## Типы данных, структуры и дополнительные возможности

 */

// Создайте структуру SimpleCity, которая будет описывать погоду и содержать свойства temperature типа Int и condition типа String

// попробуйте создайте экземпляр структуры

// Создайте класс SimpleCity для хранение информации о городе,
// пока только с названием (постоянное свойство name) и погодой (переменное свойство weather)

// Попробуйте создать экземаляр нашего класса

// Неудобно описывать состояние погоды в виде строки, поэтому создадим перечисление WeatherCondition
// и занесем туда значения: ясно, облачно, дождь, гроза и снег

// Теперь, чтобы адаптировать ранее созданные класс и структуру под тип WeatherCondition нам нужно создать новые типы,
// давайте создадим структуру Weather и City, но уже с использованием для храненения состояния

// Создайте массив городов newCities заполнять его явно не очень удачная затея, поэтому используйте для этого,
// словарь modernTemperatures, который мы использовали ранее если состояние не указано явно,
// то по-умолчанию используем WeatherCondition.clear

// Выведите прогноз погоды в уже знакомом нам формате, но с использованием newCities.
// Если отсутствует weather, то используем 0 или WeatherCondition.clear в зависимости от типа данных
// Пример: Температура в городе Санкт-Петербург составит 10° (дождь)

// Согласитесь, что неправильно в случае отсутствия информации о погоде выводить какие-то значения по-умолчанию.
// Перепишите код выше, с использованием guard и в случае отсутствия информации о погоде выводите сообщение
// "Для города <город> погода неизвестна"

// Создайте расширение WeatherCondition для отображения состояния в виде emoji

// Выведите в консоль сводку с использованием emoji для описания состояния.
// Используйте метод расширения

// Создайте проткол WeatherTrackable со свойстом weatherMessage

// С помощью расширения реализуйте этот протокол классом City

// Выведите в консоль сводку с использованием emoji для описания состояния.
// Используйте свойства расширения


/*:

 ## Функциональный тип

*/


// Создайте объект класса City и присвойте ему значение погоды

// Добавьте возможность ретранслировать сообщение о погоде

// А теперь в одну строчку

// Создайте расширение класса City с методами, изменяющими в нем температуру и погодные условия

// Запустите в городе дождь

// Сделайте температуру в городе ниже

// Измените температуру и погодные условия в городе, и распечатайте их
// Все в одну строчку

// Конец)
